name: cmake-build

on:
  push:
    branches:
      - develop_v4

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  GENERATOR: 'Visual Studio 16 2019'
  SGEN: vs2019-x64
  IFORT_COMPILER21: C:\Program Files (x86)\Intel\oneAPI\compiler\2021.2.0\windows\


jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    steps:
    - name: Checkout iricdev
      uses: actions/checkout@v2
      with:
        repository: i-RIC/iricdev-2019
        persist-credentials: false               # required to commit with a Personal access token
        ref: 2019                                # @todo change to master_v4 or develop_v4

    - name: Checkout iriclib
      uses: actions/checkout@v2
      with:
        path: lib/src/iriclib-git

    - name: Set file mtimes for msbuild
      run: |
        curl -L -O https://raw.githubusercontent.com/MestreLion/git-tools/cd87904e0b85d74b1d05f6acbd10553a0ceaceb0/git-restore-mtime
        python git-restore-mtime
        rm git-restore-mtime

    - name: Setup path for msbuild
      uses: microsoft/setup-msbuild@v1.0.2
      with:
        vs-version: '[16.9,17)'

    - name: Export iriclib version
      run: |
        # update CMakeLists.txt version number for iriclib
        Set-Location .\lib\src\iriclib-git
        (Get-Content .\CMakeLists.txt) | Foreach-Object {
          if ($_ -match '^  VERSION (?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)(?:\.(?<patch>0|[1-9]\d*))?$') {
            if ($Matches.ContainsKey('patch')) {
              $patch = 1 + $Matches['patch']
            }
            else {
              $patch = 0
            }
            $env:IRICLIB_VER = $Matches['major'] + "." + $Matches['minor'] + "." + $patch
            return "  VERSION " + $env:IRICLIB_VER
          }
          return $_
        } | Set-Content .\CMakeLists.txt
        Write-Output "IRICLIB_VER=$env:IRICLIB_VER" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    - name: Setup programs
      run: Copy-Item .\programs_std.prop .\programs.prop

    - name: Export POCO version
      run: |
        (Get-Content .\versions.cmd) | Foreach-Object {
          if ($_ -imatch '^set POCO_VER=(?<version>.*)$') {
            $env:POCO_VER = $Matches['version']
          }
        }
        Write-Output "POCO_VER=$env:POCO_VER" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # - name: Cache poco
    #   id: cache-poco
    #   uses: actions/cache@v2
    #   with:
    #     path: ${{github.workspace}}/lib/install/poco-${{env.POCO_VER}}
    #     key: ${{runner.os}}-poco-${{hashFiles('./poco.*')}}

    # - name: Build poco
    #   if: steps.cache-poco.outputs.cache-hit != 'true'
    #   run: msbuild /noLogo /maxCpuCount /target:poco-build iricdev.proj

    - name: Export HDF5 version
      run: |
        (Get-Content .\versions.cmd) | Foreach-Object {
          if ($_ -imatch '^set HDF5_VER=(?<version>.*)$') {
            $env:HDF5_VER = $Matches['version']
          }
        }
        Write-Output "HDF5_VER=$env:HDF5_VER" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

    # - name: Cache hdf5
    #   id: cache-hdf5
    #   uses: actions/cache@v2
    #   with:
    #     path: ${{github.workspace}}/lib/install/hdf5-${{env.HDF5_VER}}
    #     key: ${{runner.os}}-hdf5-${{hashFiles('./hdf5.*')}}

    # - name: Build hdf5
    #   if: steps.cache-hdf5.outputs.cache-hit != 'true'
    #   run: msbuild /noLogo /maxCpuCount /target:hdf5-build iricdev.proj

    # - name: Build iriclib
    #   env:
    #     X_CMAKE_INSTALL_PREFIX: ${{github.workspace}}/lib/install/poco-${{env.POCO_VER}}/lib/cmake/Poco;${{github.workspace}}/lib/install/hdf5-${{env.HDF5_VER}}/release/cmake/hdf5
    #     IFORT_COMPILER21: C:\Program Files (x86)\Intel\oneAPI\compiler\2021.2.0\windows\
    #   run: msbuild /noLogo /maxCpuCount /target:iriclib_v4-build iricdev.proj

    # - name: Test iriclib debug
    #   run: cd lib/build/iriclib-${{env.IRICLIB_VER}} && ctest -C debug

    # - name: Test iriclib release
    #   run: cd lib/build/iriclib-${{env.IRICLIB_VER}} && ctest -C release

    # - name: 7z sdk
    #   run: |
    #     Rename-Item .\lib\install iricsdk
    #     7z a iricsdk.7z .\lib\iricsdk
    #     Rename-Item .\lib\iricsdk install

    - name: Commit and push
      if: ${{ github.repository == 'usgs-coupled/iriclib-test' }}
      uses: actions-js/push@master
      with:
        github_token: ${{secrets.GITHUB_TEST_TOKEN}}
        directory: lib/src/iriclib-git
        # branch: ${{github.ref}}
        branch: develop_v4

    - name: Commit and push branch
      if: ${{ github.repository != 'usgs-coupled/iriclib-test' }}
      uses: actions-js/push@master
      with:
        github_token: ${{secrets.GITHUB_TEST_TOKEN}}
        directory: lib/src/iriclib-git
        branch: __${{github.event.repository.name}}_${{github.run_number}}

    - name: Create release
      env:
        releases_url: ${{github.api_url}}/repos/${{github.repository}}/releases
      run: |
        Push-Location lib/src/iriclib-git

        # store new commit
        $target_commitish = (git log -n1 --format=format:"%H")

        Pop-Location

        if (! ($env:IRICLIB_VER -match "^(?<major>0|[1-9]\d*)\.(?<minor>[0|1-9]\d*)\.(?<patch>[0|1-9]\d*)$") ) {
          throw "Bad version"
        }

        # create headers dictionary
        $h = @{"Authorization" = "token ${{secrets.GITHUB_TEST_TOKEN}}"}

        $releases_url = "${{env.releases_url}}"

        # create release
        # POST /repos/{owner}/{repo}/releases
        # see https://docs.github.com/en/rest/reference/repos#create-a-release
        # see https://docs.github.com/ja/rest/reference/repos#create-a-release
        #
        $create = @{
          "tag_name"         = "v" + $Matches[0]
          "target_commitish" = "$target_commitish"
          "name"             = "iriclib " + $Matches[0]
          "draft"            = $true
        }
        $create_json = $create | ConvertTo-Json
        $release = Invoke-WebRequest -Uri $releases_url -Headers $h -Method POST -Body $create_json

        # upload artifact (asset)
        # POST /repos/{owner}/{repo}/releases/{release_id}/assets
        # see https://docs.github.com/en/rest/reference/repos#upload-a-release-asset
        # see https://docs.github.com/ja/rest/reference/repos#upload-a-release-asset
        #
        $upload_uri = ($release.Content | ConvertFrom-Json).upload_url
        if (! ($upload_uri -match  "(.*)\{\?name,label\}") ) {
          # expecting URI{?name,label}
          # ie https://uploads.github.com/repos/scharlton2/iriclib_v4/releases/24058628/assets{?name,label}
          throw "Bad upload_url"
        }
        $upload_uri = $Matches[1] + "?name=iricsdk-$env:IRICLIB_VER.7z"
        $h["Content-type"] = "application/x-7z-compressed"
        $bytes = [System.IO.File]::ReadAllBytes("iricsdk.7z")
        $upload = Invoke-WebRequest -Uri $upload_uri -Headers $h -Method POST -Body $bytes

        # update release
        # PATCH /repos/{owner}/{repo}/releases/{release_id}
        # see https://docs.github.com/en/rest/reference/repos#update-a-release
        # see https://docs.github.com/ja/rest/reference/repos#update-a-release
        #
        $release_id = ($release.Content | ConvertFrom-Json).id
        $h.Remove("Content-type")
        $update = @{ "draft" = $false }
        $update_json = $update | ConvertTo-Json
        $release = Invoke-WebRequest -Uri "$releases_url/$release_id" -Headers $h -Method PATCH -Body $update_json

        # display download url
        Write-Output "$((($release.Content | ConvertFrom-Json).assets).browser_download_url)"
        Get-FileHash "iricsdk.7z"
        Remove-Item iricsdk.7z

    - name: Update iriclib version
      run: |
        # versions.cmd
        (Get-Content .\versions.cmd) | Foreach-Object {
          if ($_ -match '^set IRICLIB_VER=.*$') {
            return "set IRICLIB_VER=" + $env:IRICLIB_VER
          }
          return $_
        } | Set-Content .\versions.cmd
        # versions.sh
        (Get-Content .\versions.sh) | Foreach-Object {
          if ($_ -match '^IRICLIB_VER=.*$') {
            return 'IRICLIB_VER=' + $env:IRICLIB_VER
          }
          return $_
        } | Set-Content .\versions.sh
        git status
        git diff

    # - name: Commit and push iricdev
    #   uses: actions-js/push@master
    #   with:
    #     github_token: ${{secrets.IRICLIB_V4_ACTION_GHP_TOKEN}}
    #     repository: i-RIC/iricdev-2019
    #     branch: 2019
